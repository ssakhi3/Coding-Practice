
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.


Soln #1:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int sum = l1.val + l2.val;
        int carry = 0;
        ListNode curr;
//         check if we have a carry
        if (sum >= 10) {
            carry = sum / 10;
            curr = new ListNode(sum%10);
        } else {
            curr = new ListNode(sum);
        }
        
        ListNode firstNode = curr;
        
        int val1 = 0;
        int val2 = 0; 
        
        ListNode temp;
        
        while (l1.next != null || l2.next != null) {            
            if (l1.next != null && l2.next != null) {
                l1 = l1.next;
                l2 = l2.next; 
                val1 = l1.val;
                val2 = l2.val;
            } else if (l1.next != null && l2.next == null) {
                l1 = l1.next;
                val1 = l1.val;
                val2 = 0;
            } else {
                l2 = l2.next;
                val1 = 0;
                val2 = l2.val;
            }
            
            sum = val1 + val2 + carry;
            
            
            if (sum >= 10) {
                carry = sum / 10;
                temp = new ListNode(sum%10);
            } else {
                temp = new ListNode(sum);
                carry = 0;
            }
            
            curr.next = temp;
            curr = temp;
        }
        
        if (carry != 0) {
            temp = new ListNode(carry); 
            curr.next = temp;
        }
        
      
        return firstNode;
    }
}